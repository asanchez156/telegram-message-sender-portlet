/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.test.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.test.model.Entry;
import com.test.model.EntryModel;
import com.test.model.EntrySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Entry service. Represents a row in the &quot;Event_Entry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.test.model.EntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntryImpl}.
 * </p>
 *
 * @author asanchez
 * @see EntryImpl
 * @see com.test.model.Entry
 * @see com.test.model.EntryModel
 * @generated
 */
@JSON(strict = true)
public class EntryModelImpl extends BaseModelImpl<Entry> implements EntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a entry model instance should use the {@link com.test.model.Entry} interface instead.
	 */
	public static final String TABLE_NAME = "Event_Entry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "tm_Id", Types.BIGINT },
			{ "user", Types.VARCHAR },
			{ "message", Types.VARCHAR },
			{ "date_", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Event_Entry (tm_Id LONG not null primary key,user VARCHAR(75) null,message VARCHAR(75) null,date_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Event_Entry";
	public static final String ORDER_BY_JPQL = " ORDER BY entry.date DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Event_Entry.date_ DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.test.model.Entry"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.test.model.Entry"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Entry toModel(EntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Entry model = new EntryImpl();

		model.setTm_Id(soapModel.getTm_Id());
		model.setUser(soapModel.getUser());
		model.setMessage(soapModel.getMessage());
		model.setDate(soapModel.getDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Entry> toModels(EntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Entry> models = new ArrayList<Entry>(soapModels.length);

		for (EntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.test.model.Entry"));

	public EntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tm_Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTm_Id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tm_Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Entry.class;
	}

	@Override
	public String getModelClassName() {
		return Entry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("tm_Id", getTm_Id());
		attributes.put("user", getUser());
		attributes.put("message", getMessage());
		attributes.put("date", getDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long tm_Id = (Long)attributes.get("tm_Id");

		if (tm_Id != null) {
			setTm_Id(tm_Id);
		}

		String user = (String)attributes.get("user");

		if (user != null) {
			setUser(user);
		}

		String message = (String)attributes.get("message");

		if (message != null) {
			setMessage(message);
		}

		String date = (String)attributes.get("date");

		if (date != null) {
			setDate(date);
		}
	}

	@JSON
	@Override
	public long getTm_Id() {
		return _tm_Id;
	}

	@Override
	public void setTm_Id(long tm_Id) {
		_tm_Id = tm_Id;
	}

	@JSON
	@Override
	public String getUser() {
		if (_user == null) {
			return StringPool.BLANK;
		}
		else {
			return _user;
		}
	}

	@Override
	public void setUser(String user) {
		_user = user;
	}

	@JSON
	@Override
	public String getMessage() {
		if (_message == null) {
			return StringPool.BLANK;
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		_message = message;
	}

	@JSON
	@Override
	public String getDate() {
		if (_date == null) {
			return StringPool.BLANK;
		}
		else {
			return _date;
		}
	}

	@Override
	public void setDate(String date) {
		_date = date;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Entry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Entry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Entry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EntryImpl entryImpl = new EntryImpl();

		entryImpl.setTm_Id(getTm_Id());
		entryImpl.setUser(getUser());
		entryImpl.setMessage(getMessage());
		entryImpl.setDate(getDate());

		entryImpl.resetOriginalValues();

		return entryImpl;
	}

	@Override
	public int compareTo(Entry entry) {
		int value = 0;

		value = getDate().compareTo(entry.getDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Entry)) {
			return false;
		}

		Entry entry = (Entry)obj;

		long primaryKey = entry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Entry> toCacheModel() {
		EntryCacheModel entryCacheModel = new EntryCacheModel();

		entryCacheModel.tm_Id = getTm_Id();

		entryCacheModel.user = getUser();

		String user = entryCacheModel.user;

		if ((user != null) && (user.length() == 0)) {
			entryCacheModel.user = null;
		}

		entryCacheModel.message = getMessage();

		String message = entryCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			entryCacheModel.message = null;
		}

		entryCacheModel.date = getDate();

		String date = entryCacheModel.date;

		if ((date != null) && (date.length() == 0)) {
			entryCacheModel.date = null;
		}

		return entryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{tm_Id=");
		sb.append(getTm_Id());
		sb.append(", user=");
		sb.append(getUser());
		sb.append(", message=");
		sb.append(getMessage());
		sb.append(", date=");
		sb.append(getDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.test.model.Entry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>tm_Id</column-name><column-value><![CDATA[");
		sb.append(getTm_Id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>user</column-name><column-value><![CDATA[");
		sb.append(getUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>message</column-name><column-value><![CDATA[");
		sb.append(getMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date</column-name><column-value><![CDATA[");
		sb.append(getDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Entry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Entry.class };
	private long _tm_Id;
	private String _user;
	private String _message;
	private String _date;
	private Entry _escapedModel;
}